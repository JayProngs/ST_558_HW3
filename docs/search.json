[
  {
    "objectID": "ST_558_HW3.html",
    "href": "ST_558_HW3.html",
    "title": "Programming in R- Loops & Functions",
    "section": "",
    "text": "Webpage created for submission of HW3 ST-558"
  },
  {
    "objectID": "ST_558_HW3.html#homework-3",
    "href": "ST_558_HW3.html#homework-3",
    "title": "Programming in R- Loops & Functions",
    "section": "",
    "text": "Webpage created for submission of HW3 ST-558"
  },
  {
    "objectID": "ST_558_HW3.html#loading-.rda-file",
    "href": "ST_558_HW3.html#loading-.rda-file",
    "title": "Programming in R- Loops & Functions",
    "section": "Loading .rda file",
    "text": "Loading .rda file\nLoading .rda file\n\nload(\"hw2_list.rda\")"
  },
  {
    "objectID": "ST_558_HW3.html#task-1-control-flow-practice",
    "href": "ST_558_HW3.html#task-1-control-flow-practice",
    "title": "Programming in R- Loops & Functions",
    "section": "Task 1: Control flow practice",
    "text": "Task 1: Control flow practice\nI have used two for loops, one is for looping the dataframes in bp_list and other is for looping the number of observation in each dataframe as the number of observation is not same in treatment and placebo. I started with hard coded dataframe name and status column length and looping each post_bp value to populate status column. Then I used nrow() to loop till that value and initialize the status column. Post this I used names() to loop through the dataframe names and selected that dataframe to initialize df variable.\n\nfor (df_name in names(bp_list)) \n{\n  # loop through each dataframe in bp_list\n  df &lt;- bp_list[[df_name]]\n  # used nrow to remove hardcoding for 10 and 20 length\n  df$status &lt;- character(nrow(df))\n  for (i in 1:nrow(df))\n    {\n      if (df$post_bp[i] &lt;= 120) \n        {\n          df$status[i] &lt;- \"Optimal\"\n        } \n      else if (df$post_bp[i] &gt; 120 && df$post_bp[i] &lt;= 130) \n        {\n          df$status[i] &lt;- \"Borderline\"\n        }\n      else \n        {\n          df$status[i] &lt;- \"High\"\n        }\n    }\n  bp_list[[df_name]] &lt;- df\n}\n\nbp_list\n\n$treatment\n              patient pre_bp post_bp diff_bp normal     status\nSubject_1   Subject_1    120     127      -7  FALSE Borderline\nSubject_2   Subject_2    151     145       6  FALSE       High\nSubject_3   Subject_3    125     135     -10  FALSE       High\nSubject_4   Subject_4    126     122       4  FALSE Borderline\nSubject_5   Subject_5    115     115       0   TRUE    Optimal\nSubject_6   Subject_6    132     122      10  FALSE Borderline\nSubject_7   Subject_7    132     123       9  FALSE Borderline\nSubject_8   Subject_8    129     126       3  FALSE Borderline\nSubject_9   Subject_9    134     126       8  FALSE Borderline\nSubject_10 Subject_10    139     129      10  FALSE Borderline\nSubject_11 Subject_11    127     132      -5  FALSE       High\nSubject_12 Subject_12    122     146     -24  FALSE       High\nSubject_13 Subject_13    127     120       7  FALSE    Optimal\nSubject_14 Subject_14    135     114      21   TRUE    Optimal\nSubject_15 Subject_15    133     121      12  FALSE Borderline\nSubject_16 Subject_16    128     120       8  FALSE    Optimal\nSubject_17 Subject_17    147     128      19  FALSE Borderline\nSubject_18 Subject_18    138     120      18  FALSE    Optimal\nSubject_19 Subject_19    140     133       7  FALSE       High\nSubject_20 Subject_20    132     115      17   TRUE    Optimal\n\n$placebo\n      patient pre_bp post_bp diff_bp normal     status\n1   Subject_1    138     105      33   TRUE    Optimal\n2   Subject_2    135     136      -1  FALSE       High\n3   Subject_3    147     123      24  FALSE Borderline\n4   Subject_4    117     130     -13  FALSE Borderline\n5   Subject_5    152     134      18  FALSE       High\n6   Subject_6    134     143      -9  FALSE       High\n7   Subject_7    114     135     -21  FALSE       High\n8   Subject_8    121     139     -18  FALSE       High\n9   Subject_9    131     120      11  FALSE    Optimal\n10 Subject_10    130     124       6  FALSE Borderline"
  },
  {
    "objectID": "ST_558_HW3.html#task-2-function-implementation",
    "href": "ST_558_HW3.html#task-2-function-implementation",
    "title": "Programming in R- Loops & Functions",
    "section": "Task 2: Function implementation",
    "text": "Task 2: Function implementation\nI have created function summarize_bp_stats which will take input of dataframe and one string (which if not given will be “mean”). I used get() to get function from input into my_fun. Then I use my_fun() to pre_bp, post_bp and diff_bp of both dataframes, namely treatment and placebo. To name the resultant vector I concatenate input provided by user in stat variable to “_dataframeName_columnName” format. And assign those names to result vector.\n\nsummarize_bp_stats &lt;- function(df_list, stat = \"mean\")\n{\n  my_fun &lt;- get(stat)\n  \n  treatment_df &lt;- df_list$treatment\n  placebo_df &lt;- df_list$placebo\n\n  treatment_pre &lt;- my_fun(treatment_df$pre_bp)\n  treatment_post &lt;- my_fun(treatment_df$post_bp)\n  treatment_diff &lt;- my_fun(treatment_df$diff_bp)\n  \n  placebo_pre &lt;- my_fun(placebo_df$pre_bp)\n  placebo_post &lt;- my_fun(placebo_df$post_bp)\n  placebo_diff &lt;- my_fun(placebo_df$diff_bp)\n\n  result_values &lt;- c(treatment_pre,\n                     treatment_post, \n                     treatment_diff, \n                     placebo_pre, \n                     placebo_post, \n                     placebo_diff)\n  \n  result_names &lt;- c(paste0(stat, \"_treatment_pre_bp\"),\n                    paste0(stat, \"_treatment_post_bp\"), \n                    paste0(stat, \"_treatment_diff_bp\"),\n                    paste0(stat, \"_placebo_pre_bp\"), \n                    paste0(stat, \"_placebo_post_bp\"), \n                    paste0(stat, \"_placebo_diff_bp\"))\n\n  names(result_values) &lt;- result_names\n  \n  return(result_values)\n}\n\nmean_results &lt;- summarize_bp_stats(bp_list) # Default which is mean\nvar_results &lt;- summarize_bp_stats(bp_list, \"var\") # Variance\nsd_results &lt;- summarize_bp_stats(bp_list, \"sd\") # Standard deviation\nmin_results &lt;- summarize_bp_stats(bp_list, \"min\") # Minimum\nmax_results &lt;- summarize_bp_stats(bp_list, \"max\") # Maximum\n\nmean_results\n\n mean_treatment_pre_bp mean_treatment_post_bp mean_treatment_diff_bp \n                131.60                 125.95                   5.65 \n   mean_placebo_pre_bp   mean_placebo_post_bp   mean_placebo_diff_bp \n                131.90                 128.90                   3.00 \n\nvar_results\n\n var_treatment_pre_bp var_treatment_post_bp var_treatment_diff_bp \n             75.72632              78.99737             117.81842 \n   var_placebo_pre_bp   var_placebo_post_bp   var_placebo_diff_bp \n            149.87778             124.98889             341.33333 \n\nsd_results\n\n sd_treatment_pre_bp sd_treatment_post_bp sd_treatment_diff_bp \n            8.702087             8.888046            10.854419 \n   sd_placebo_pre_bp   sd_placebo_post_bp   sd_placebo_diff_bp \n           12.242458            11.179843            18.475209 \n\nmin_results\n\n min_treatment_pre_bp min_treatment_post_bp min_treatment_diff_bp \n                  115                   114                   -24 \n   min_placebo_pre_bp   min_placebo_post_bp   min_placebo_diff_bp \n                  114                   105                   -21 \n\nmax_results\n\n max_treatment_pre_bp max_treatment_post_bp max_treatment_diff_bp \n                  151                   146                    21 \n   max_placebo_pre_bp   max_placebo_post_bp   max_placebo_diff_bp \n                  152                   143                    33"
  }
]